#include <bits/stdc++.h>
using namespace std;

namespace fft{
	void fft(vector<int> &a, bool inv){
		int n = a.size(), j = 0;
		vector<int> roots(n / 2);
		for(int i=1; i<n; i++){
			int bit = (n >> 1);
			while(j >= bit){
				j -= bit;
				bit >>= 1;
			}
			j += bit;
			if(i < j) swap(a[i], a[j]);
		}
		for(int i=2; i<=n; i<<=1){
			int step = n / i;
			for(int j=0; j<n; j+=i){
				for(int k=0; k<i/2; k++){
					int u = a[j+k];
					int v = a[j+k+i/2];
					a[j+k] = u;
					a[j+k+i/2] = u + v;
				}
			}
		}
		if(inv) for(int i=0; i<n; i++) a[i] /= n;
	}
	vector<int> multiply(vector<int> v, vector<int> w){
		vector<int> fv(v.begin(), v.end());
		vector<int> fw(w.begin(), w.end());
		int n = 2;
		while(n < v.size() + w.size()) n <<= 1;
		fv.resize(n); fw.resize(n);
		fft(fv, 0); fft(fw, 0);
		for(int i=0; i<n; i++) fv[i] *= fw[i];
		fft(fv, 1);
		return fv;
	}
}

int pwr[20];
int n, a[16], b[16], c[16];

int main(){
	scanf("%d",&n);
	for(int itr = 0; itr < 1000; itr++){
		vector<int> a(16), b(16);
		for(int i=0; i<16; i++) a[i] = rand() % 100;
		for(int i=0; i<16; i++) b[i] = rand() % 100;
		memset(c, 0, sizeof(c));
		for(int i=0; i<16; i++){
			for(int j=0; j<16; j++){
				c[i|j] += a[i] * b[j];
			}
		}
		vector<int> d = fft::multiply(a, b);
		for(int i=0; i<16; i++) printf("%d ", c[i]);
		for(int i=0; i<16; i++) printf("%d ", d[i]);
		for(int i=0; i<16; i++){
			if(d[i] != c[i]){
				puts("fail");
				exit(0);
			}
		}
	}
	puts("success");
}
