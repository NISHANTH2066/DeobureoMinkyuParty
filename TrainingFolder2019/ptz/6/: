#include <bits/stdc++.h>
using namespace std;
const int MAXN = 200005;
using lint = long long;
using pi = pair<lint, int>;

int n, q;
vector<pi> gph[MAXN];
int sz[MAXN], dfn[MAXN], chn[MAXN], piv;
int par[18][MAXN], pae[MAXN], dep[MAXN];

void dfs(int x){
	sz[x] = 1;
	for(auto &i : gph[x]){
		gph[i.second].erase(find(gph[i.second].begin(), gph[i.second].end(), pi(x, i.second)));
		par[0][i.second] = x;
		pae[i.second] = i.first;
		dep[i.second] = dep[x] + 1;
		dfs(i.second);
		sz[x] += sz[i.second];
	}
	sort(gph[x].begin(), gph[x].end(), [&](const pi &a, const pi &b){
		return sz[a.second] > sz[b.second];
	});
}

int lca(int x, int y){
	if(dep[x] > dep[y]) swap(x, y);
	int dx = dep[y] - dep[x];
	for(int i=0; i<18; i++){
		if((dx >> i) & 1) y = par[i][y];
	}
	for(int i=17; i>=0; i--){
		if(par[i][x] != par[i][y]){
			x = par[i][x];
			y = par[i][y];
		}
	}
	if(x != y) return par[0][x];
	return x;
}

void hld(int x){
	dfn[x] = ++piv;
	if(x > 1){
		A[piv] = pae[x];
	}
	if(gph[x].empty()) return;
	chn[gph[x][0].second] = chn[x];
	hld(gph[x][0].second];
	for(int i=1; i<gph[x].size(); i++){
		chn[gph[x][i].second] = gph[x][i].second;
		hld(gph[x][i].second);
	}
}

int main(){
	scanf("%d %d",&n,&q);
	for(int i=1; i<n; i++){
		int s, e, x;
		scanf("%d %d %d",&s,&e,&x);
		gph[s].emplace_back(x, e);
		gph[e].emplace_back(x, s);
	}
	dfs(1);
	chn[1] = 1;
	hld(1);
	for(int i=2; i<=n; i++) A[i + n] = A[i];
	reverse(A + n + 1, A + n + n + 1);
	for(int i=1; i<18; i++){
		for(int j=1; j<=n; j++){
			par[i][j] = par[i-1][par[i-1][j]];
		}
	}
	auto query = [&](int x, int y, int s){
		if(x == y){
			return pi(max(A[x], s), max(A[x], s));
		}
		if(x < y) return Query(x, y, s);
		return Query(3*n+2-y, 3*n+2-x, s);
	};
	while(q--){
		int s, e; scanf("%d %d",&s,&e);
		int l = lca(s, e);
		int shoot = 0;
		while(chn[s] != chn[l]){
			auto ans = query(dfn[s], dfn[chn[s]], shoot);
			ret += ans.first;
			shoot = ans.second;
			s = par[0][chn[s]];
		}
		if(s != l){
			auto ans = query(dfn[s], dfn[l] + 1, shoot);
			ret += ans.first;
			shoot = ans.second;
			s = l;
		}
		vector<pi> seq;
		while(chn[e] != chn[l]){
			seq.emplace_back(dfn[chn[e]], dfn[e]);
			e = par[0][chn[e]];
		}
		if(l != e) seq.emplace_back(dfn[l] + 1, dfn[e]);
		reverse(seq.begin(), seq.end());
		for(auto &i : seq){
			auto ans = query(i.first, i.second, shoot);
			ret += ans.first;
			shoot = ans.second;
		}
		printf("%lld\n", ret);
	}
}
